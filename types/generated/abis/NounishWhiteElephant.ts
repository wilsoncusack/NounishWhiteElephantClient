/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace WhiteElephant {
  export type GameStruct = {
    participants: PromiseOrValue<string>[];
    nonce: PromiseOrValue<BigNumberish>;
  };

  export type GameStructOutput = [string[], BigNumber] & {
    participants: string[];
    nonce: BigNumber;
  };

  export type LastStealInfoStruct = {
    lastStolenID: PromiseOrValue<BigNumberish>;
    round: PromiseOrValue<BigNumberish>;
  };

  export type LastStealInfoStructOutput = [BigNumber, number] & {
    lastStolenID: BigNumber;
    round: number;
  };

  export type GameStateStruct = {
    round: PromiseOrValue<BigNumberish>;
    gameOver: PromiseOrValue<boolean>;
    nextToGo: PromiseOrValue<string>;
    lastStealInfo: WhiteElephant.LastStealInfoStruct;
  };

  export type GameStateStructOutput = [
    number,
    boolean,
    string,
    WhiteElephant.LastStealInfoStructOutput
  ] & {
    round: number;
    gameOver: boolean;
    nextToGo: string;
    lastStealInfo: WhiteElephant.LastStealInfoStructOutput;
  };
}

export interface NounishWhiteElephantInterface extends utils.Interface {
  functions: {
    "currentParticipantTurn(bytes32,(address[],uint256))": FunctionFragment;
    "endTimestamp()": FunctionFragment;
    "gameID((address[],uint256))": FunctionFragment;
    "nft()": FunctionFragment;
    "open((address[],uint256))": FunctionFragment;
    "owner()": FunctionFragment;
    "participantFee()": FunctionFragment;
    "setEndTimestamp(uint256)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "startGame((address[],uint256))": FunctionFragment;
    "state(bytes32)": FunctionFragment;
    "steal((address[],uint256),uint256)": FunctionFragment;
    "timesStolen(uint256)": FunctionFragment;
    "tokenGameID(uint256)": FunctionFragment;
    "transferFees(address,uint256)": FunctionFragment;
    "updateMetadata(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "currentParticipantTurn"
      | "endTimestamp"
      | "gameID"
      | "nft"
      | "open"
      | "owner"
      | "participantFee"
      | "setEndTimestamp"
      | "setOwner"
      | "startGame"
      | "state"
      | "steal"
      | "timesStolen"
      | "tokenGameID"
      | "transferFees"
      | "updateMetadata"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "currentParticipantTurn",
    values: [PromiseOrValue<BytesLike>, WhiteElephant.GameStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "endTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gameID",
    values: [WhiteElephant.GameStruct]
  ): string;
  encodeFunctionData(functionFragment: "nft", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "open",
    values: [WhiteElephant.GameStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "participantFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEndTimestamp",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "startGame",
    values: [WhiteElephant.GameStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "state",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "steal",
    values: [WhiteElephant.GameStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "timesStolen",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenGameID",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFees",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMetadata",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "currentParticipantTurn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "open", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "participantFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEndTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "steal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timesStolen",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenGameID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMetadata",
    data: BytesLike
  ): Result;

  events: {
    "Open(bytes32,address,uint256)": EventFragment;
    "OwnerUpdated(address,address)": EventFragment;
    "StartGame(bytes32,tuple)": EventFragment;
    "Steal(bytes32,address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Open"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StartGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Steal"): EventFragment;
}

export interface OpenEventObject {
  gameID: string;
  player: string;
  tokenId: BigNumber;
}
export type OpenEvent = TypedEvent<
  [string, string, BigNumber],
  OpenEventObject
>;

export type OpenEventFilter = TypedEventFilter<OpenEvent>;

export interface OwnerUpdatedEventObject {
  user: string;
  newOwner: string;
}
export type OwnerUpdatedEvent = TypedEvent<
  [string, string],
  OwnerUpdatedEventObject
>;

export type OwnerUpdatedEventFilter = TypedEventFilter<OwnerUpdatedEvent>;

export interface StartGameEventObject {
  gameID: string;
  game: WhiteElephant.GameStructOutput;
}
export type StartGameEvent = TypedEvent<
  [string, WhiteElephant.GameStructOutput],
  StartGameEventObject
>;

export type StartGameEventFilter = TypedEventFilter<StartGameEvent>;

export interface StealEventObject {
  gameID: string;
  stealer: string;
  tokenId: BigNumber;
  stolenFrom: string;
}
export type StealEvent = TypedEvent<
  [string, string, BigNumber, string],
  StealEventObject
>;

export type StealEventFilter = TypedEventFilter<StealEvent>;

export interface NounishWhiteElephant extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NounishWhiteElephantInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    currentParticipantTurn(
      _gameID: PromiseOrValue<BytesLike>,
      game: WhiteElephant.GameStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    endTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    gameID(
      game: WhiteElephant.GameStruct,
      overrides?: CallOverrides
    ): Promise<[string]>;

    nft(overrides?: CallOverrides): Promise<[string]>;

    open(
      game: WhiteElephant.GameStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    participantFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    setEndTimestamp(
      _new: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    startGame(
      game: WhiteElephant.GameStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    state(
      _gameID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[WhiteElephant.GameStateStructOutput]>;

    steal(
      game: WhiteElephant.GameStruct,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timesStolen(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenGameID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFees(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateMetadata(
      _metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  currentParticipantTurn(
    _gameID: PromiseOrValue<BytesLike>,
    game: WhiteElephant.GameStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  gameID(
    game: WhiteElephant.GameStruct,
    overrides?: CallOverrides
  ): Promise<string>;

  nft(overrides?: CallOverrides): Promise<string>;

  open(
    game: WhiteElephant.GameStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  participantFee(overrides?: CallOverrides): Promise<BigNumber>;

  setEndTimestamp(
    _new: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  startGame(
    game: WhiteElephant.GameStruct,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  state(
    _gameID: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<WhiteElephant.GameStateStructOutput>;

  steal(
    game: WhiteElephant.GameStruct,
    tokenID: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timesStolen(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenGameID(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFees(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateMetadata(
    _metadata: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    currentParticipantTurn(
      _gameID: PromiseOrValue<BytesLike>,
      game: WhiteElephant.GameStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    gameID(
      game: WhiteElephant.GameStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    nft(overrides?: CallOverrides): Promise<string>;

    open(
      game: WhiteElephant.GameStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    participantFee(overrides?: CallOverrides): Promise<BigNumber>;

    setEndTimestamp(
      _new: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    startGame(
      game: WhiteElephant.GameStruct,
      overrides?: CallOverrides
    ): Promise<string>;

    state(
      _gameID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<WhiteElephant.GameStateStructOutput>;

    steal(
      game: WhiteElephant.GameStruct,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    timesStolen(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenGameID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFees(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateMetadata(
      _metadata: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Open(bytes32,address,uint256)"(
      gameID?: PromiseOrValue<BytesLike> | null,
      player?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): OpenEventFilter;
    Open(
      gameID?: PromiseOrValue<BytesLike> | null,
      player?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): OpenEventFilter;

    "OwnerUpdated(address,address)"(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;
    OwnerUpdated(
      user?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnerUpdatedEventFilter;

    "StartGame(bytes32,tuple)"(
      gameID?: PromiseOrValue<BytesLike> | null,
      game?: null
    ): StartGameEventFilter;
    StartGame(
      gameID?: PromiseOrValue<BytesLike> | null,
      game?: null
    ): StartGameEventFilter;

    "Steal(bytes32,address,uint256,address)"(
      gameID?: PromiseOrValue<BytesLike> | null,
      stealer?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      stolenFrom?: null
    ): StealEventFilter;
    Steal(
      gameID?: PromiseOrValue<BytesLike> | null,
      stealer?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null,
      stolenFrom?: null
    ): StealEventFilter;
  };

  estimateGas: {
    currentParticipantTurn(
      _gameID: PromiseOrValue<BytesLike>,
      game: WhiteElephant.GameStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    gameID(
      game: WhiteElephant.GameStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nft(overrides?: CallOverrides): Promise<BigNumber>;

    open(
      game: WhiteElephant.GameStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    participantFee(overrides?: CallOverrides): Promise<BigNumber>;

    setEndTimestamp(
      _new: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    startGame(
      game: WhiteElephant.GameStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    state(
      _gameID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    steal(
      game: WhiteElephant.GameStruct,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timesStolen(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenGameID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFees(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateMetadata(
      _metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    currentParticipantTurn(
      _gameID: PromiseOrValue<BytesLike>,
      game: WhiteElephant.GameStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    endTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameID(
      game: WhiteElephant.GameStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    open(
      game: WhiteElephant.GameStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    participantFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEndTimestamp(
      _new: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    startGame(
      game: WhiteElephant.GameStruct,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    state(
      _gameID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    steal(
      game: WhiteElephant.GameStruct,
      tokenID: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timesStolen(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenGameID(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFees(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateMetadata(
      _metadata: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
